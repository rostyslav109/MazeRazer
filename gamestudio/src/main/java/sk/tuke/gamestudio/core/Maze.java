package sk.tuke.gamestudio.core;

public class Maze {
    private final char[][] grid;

    public Maze(char[][] grid) {
        this.grid = grid;
    }

    public boolean isExit(Position pos) {
        return grid[pos.getY()][pos.getX()] == 'E';
    }

    public boolean isValidMove(int x, int y) {
        return grid[y][x] != '#';  // –Ø–∫—â–æ –Ω–µ —Å—Ç—ñ–Ω–∞, –º–æ–∂–Ω–∞ —Ä—É—Ö–∞—Ç–∏—Å—è
    }

    public char[][] getGrid() {
        return grid;
    }

    public static Maze getHardMaze() {
        return new Maze(new char[][]{
                        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
                        {'#', 'S', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#'},
                        {'#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#'},
                        {'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#'},
                        {'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#'},
                        {'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', '#'},
                        {'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#'},
                        {'#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', '#'},
                        {'#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#'},
                        {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#'},
                        {'#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#'},
                        {'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#'},
                        {'#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#'},
                        {'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#'},
                        {'#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#'},
                        {'#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#'},
                        {'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#'},
                        {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', 'E', '#', '#'},
                        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
                        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
        });
    }

    public static Maze getMediumMaze() {
        return new Maze(new char[][]{
                        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
                        {'#', 'S', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#'},
                        {'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'},
                        {'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'},
                        {'#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#'},
                        {'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', '#'},
                        {'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'},
                        {'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#'},
                        {'#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#'},
                        {'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
                        {'#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#'},
                        {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
                        {'#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
                        {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'E', '#'},
                        {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
        });
    }

    public static Maze getEasyMaze() {
        return new Maze(new char[][]{
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
                {'#', 'S', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', '#', ' ', '#'},
                {'#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', '#'},
                {'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#'},
                {'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#'},
                {'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#'},
                {'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#'},
                {'#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#'},
                {'#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#'},
                {'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', 'E', '#'},
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
        });
    }

    public void printMaze(Position playerPos) {
        System.out.println("‚ïî" + "‚ïê".repeat(grid[0].length) + "‚ïó");
        for (int i = 0; i < grid.length; i++) {
            System.out.print("‚ïë");
            for (int j = 0; j < grid[i].length; j++) {
                if (playerPos.getX() == j && playerPos.getY() == i) {
                    System.out.print("üü¢");  // –ì—Ä–∞–≤–µ—Ü—å
                } else if (grid[i][j] == '#') {
                    System.out.print("‚¨õ");  // –°—Ç—ñ–Ω–∞
                } else if (grid[i][j] == 'S') {
                    System.out.print("üü©");  // –°—Ç–∞—Ä—Ç
                } else if (grid[i][j] == 'E') {
                    System.out.print("üü•");  // –í–∏—Ö—ñ–¥
                } else {
                    System.out.print("‚¨ú");  // –ü—Ä–æ—Ö—ñ–¥
                }
            }
            System.out.println("‚ïë");
        }
        System.out.println("‚ïö" + "‚ïê".repeat(grid[0].length) + "‚ïù");
    }
}