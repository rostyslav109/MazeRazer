//import sk.tuke.gamestudio.consoleui.ConsoleUI;
//import sk.tuke.gamestudio.core.Maze;
//import sk.tuke.gamestudio.core.Player;
//import sk.tuke.gamestudio.core.Position;
//import sk.tuke.gamestudio.service.CommentService;
//import sk.tuke.gamestudio.service.RatingService;
//import sk.tuke.gamestudio.service.ScoreService;
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import org.mockito.Mockito;
//
//import java.io.ByteArrayInputStream;
//import java.io.ByteArrayOutputStream;
//import java.io.PrintStream;
//
//import static org.junit.jupiter.api.Assertions.assertTrue;
//import static org.mockito.Mockito.*;
//
//class ConsoleUITest {
//    private ScoreService scoreService;
//    private RatingService ratingService;
//    private CommentService commentService;
//    private ConsoleUI consoleUI;
//    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
//
//    @BeforeEach
//    void setUp() {
//        scoreService = mock(ScoreService.class);
//        ratingService = mock(RatingService.class);
//        commentService = mock(CommentService.class);
//        consoleUI = new ConsoleUI(scoreService, ratingService, commentService);
//        System.setOut(new PrintStream(outContent));
//    }
//
//    @Test
//    void testStartGameWithEasyLevel() {
//        String input = "1\nQ\n";
//        System.setIn(new ByteArrayInputStream(input.getBytes()));
//        consoleUI.start();
//        assertTrue(outContent.toString().contains("Top Scores:"));
//        assertTrue(outContent.toString().contains("Easy"));
//    }
//
//    @Test
//    void testStartGameWithInvalidChoiceDefaultsToEasy() {
//        String input = "5\nQ\n";
//        System.setIn(new ByteArrayInputStream(input.getBytes()));
//        consoleUI.start();
//        assertTrue(outContent.toString().contains("Incorrect selection! The easy level is automatically selected."));
//    }
//
//    @Test
//    void testGameLoopQuit() {
//        String input = "1\nQ\n";
//        System.setIn(new ByteArrayInputStream(input.getBytes()));
//        consoleUI.start();
//        assertTrue(outContent.toString().contains("‚ùå You quit the game. Your progress was not saved."));
//    }
//
//    @Test
//    void testWinningGame() {
//        // –ú–æ–∫–∞—î–º–æ Maze —Ç–∞ Player
//        Maze mockMaze = mock(Maze.class);
//        Player mockPlayer = mock(Player.class);
//
//        // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥–∏
//        when(mockMaze.isExit(any(Position.class))).thenReturn(true);
//
//        // –ü—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ –º–æ–∫–∞–Ω—ñ
//        consoleUI = new ConsoleUI(scoreService, ratingService, commentService);
//
//        // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Ö—ñ–¥ –¥–ª—è —Ç–µ—Å—Ç—É
//        String input = "1\nD\nD\nD\nD\n"; // –ß–æ—Ç–∏—Ä–∏ —Ö–æ–¥–∏ –≤–ø–µ—Ä–µ–¥
//        System.setIn(new ByteArrayInputStream(input.getBytes()));
//
//        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
//        consoleUI.start();
//
//        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É
//        assertTrue(outContent.toString().contains("üéâ Congratulations! You have reached the exit! üéâ"));
//    }
//}